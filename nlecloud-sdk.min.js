(function () {
    var API_HOST = "http://api.nlecloud.com"; var AccessToken = ""; function jsonp(url, fn, token, data) { url += (url.indexOf("?") > 0 ? "&" : "?") + "t=" + (new Date()).getTime(); if (token != null && token != undefined) { if (token == "") { console.log("请求" + url, { "Status": 1, "Msg": "AccessToken为空！" }); return } else { url += "&accesstoken=" + token } } url += "&jsoncallback=?"; data = data || {}; $.ajax({ type: "GET", url: url, data: data, dataType: "json", success: function (data) { fn(data) }, error: function (data) { console.log(data) } }) } function NLECloudAPI() { } NLECloudAPI.prototype = {
        userLogin: function (account, password) { var completedCallback; jsonp(API_HOST + "/developer/jsonpresend?func=login&account=" + account + "&password=" + password, function (res) { if (res.Status === 0) { AccessToken = res.ResultObj.AccessToken } completedCallback && completedCallback(res) }); return { completed: function (fn) { completedCallback = fn } } }, getProjectInfo: function (tag) { var completedCallback; jsonp(API_HOST + "/v2/project/" + tag, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getGatewayInfo: function (gatewayTag) { var completedCallback; jsonp(API_HOST + "/v2/gateway/" + gatewayTag, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getSensorList: function (gatewayTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/SensorList"; jsonp(url.format(gatewayTag), function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getSensorInfo: function (gatewayTag, apiTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/sensor/{1}".format(gatewayTag, apiTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getActuatorList: function (gatewayTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/actuatorlist".format(gatewayTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getActuatorInfo: function (gatewayTag, apiTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/actuator/{1}".format(gatewayTag, apiTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getCameraList: function (gatewayTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/cameralist".format(gatewayTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getCameraInfo: function (gatewayTag, apiTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/camera/{1}".format(gatewayTag, apiTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getGatewayOnOffLine: function (gatewayTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/onoffline".format(gatewayTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getGatewayHistoryPagerOnOffLine: function (gatewayTag, startDate, endDate, pageIndex, pageSize) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/historypageronoffline".format(gatewayTag); var data = {}; data.StartDate = startDate; data.EndDate = endDate; data.PageIndex = pageIndex; data.PageSize = pageSize; jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken, data); return { completed: function (fn) { completedCallback = fn } } }, getGatewayStatus: function (gatewayTag) { var completedCallback; var url = API_HOST + "/v2/gateway/{0}/Status".format(gatewayTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getGatewayNewestData: function (gatewayTag) { var completedCallback; var url = API_HOST + "/v2/Gateway/{0}/NewestDatas".format(gatewayTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getSensorNewestData: function (gatewayTag, sensorTag) { var completedCallback; var url = API_HOST + "/v2/Gateway/{0}/Sensor/{1}/NewestData".format(gatewayTag, sensorTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getSensorHistoryData: function (gatewayTag, sensorTag, method, timeAgo) { var completedCallback; var data = {}; data.Method = method; data.TimeAgo = timeAgo; var url = API_HOST + "/v2/Gateway/{0}/Sensor/{1}/HistoryData".format(gatewayTag, sensorTag); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken, data); return { completed: function (fn) { completedCallback = fn } } }, getSensorHistoryPagerData: function (gatewayTag, sensorTag, startDate, endDate, pageIndex, pageSize) {
            var completedCallback; var url = API_HOST + "/v2/Gateway/{0}/Sensor/{1}/HistoryPagerData".format(gatewayTag, sensorTag); var data = {}; data.StartDate = startDate; data.EndDate = endDate; data.PageIndex = pageIndex;
            data.PageSize = pageSize; jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken, data); return { completed: function (fn) { completedCallback = fn } }
        }, getActuatorNewestData: function (gatewayTag, actuatorApi) { var completedCallback; var url = API_HOST + "/v2/Gateway/{0}/actuator/{1}/NewestData".format(gatewayTag, actuatorApi); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }, getActuatorHistoryData: function (gatewayTag, actuatorApi, method, timeAgo) { var completedCallback; var data = {}; data.Method = method; data.TimeAgo = timeAgo; var url = API_HOST + "/v2/Gateway/{0}/actuator/{1}/HistoryData".format(gatewayTag, actuatorApi); jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken, data); return { completed: function (fn) { completedCallback = fn } } }, getActuatorHistoryPagerData: function (gatewayTag, actuatorApi, startDate, endDate, pageIndex, pageSize) { var completedCallback; var url = API_HOST + "/v2/Gateway/{0}/actuator/{1}/HistoryPagerData".format(gatewayTag, actuatorApi); var data = {}; data.StartDate = startDate; data.EndDate = endDate; data.PageIndex = pageIndex; data.PageSize = pageSize; jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken, data); return { completed: function (fn) { completedCallback = fn } } }, controlActuator: function (gatewayTag, actuatorApi, data) { var completedCallback; var url = API_HOST + "/developer/jsonpresend?func=control&gatewaytag=" + gatewayTag + "&apitag=" + actuatorApi + "&data=" + data; jsonp(url, function (res) { completedCallback && completedCallback(res) }, AccessToken); return { completed: function (fn) { completedCallback = fn } } }
    }; window.NLECloudAPI = NLECloudAPI
})(); String.prototype.format = function (args) { var result = this; var reg; if (arguments.length > 0) { if (arguments.length === 1 && typeof (args) === "object") { for (var key in args) { if (args.hasOwnProperty(key) && args[key] !== undefined) { reg = new RegExp("({)" + key + "(})", "g"); result = result.replace(reg, args[key]) } } } else { for (var i = 0; i < arguments.length; i++) { if (arguments[i] !== undefined) { reg = new RegExp("({)" + i + "(})", "g"); result = result.replace(reg, arguments[i]) } } } } return result };